/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/classes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all classes */
        get: operations["findClass"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search students by criteria */
        get: operations["findStudent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search users by criteria */
        get: operations["findUser"];
        put?: never;
        /** Create a new user */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an existing user */
        put: operations["updateUser"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-authentications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate a user */
        post: operations["authenticateUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-authentications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate a user who is signed up with google */
        post: operations["authenticateGoogleUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activity-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all activity category */
        get: operations["listActivityCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search activities by criteria */
        get: operations["findActivity"];
        put?: never;
        /** Create a new activity */
        post: operations["createActivity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activities/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get activity by id */
        get: operations["getActivityById"];
        /** Update an existing activity */
        put: operations["updateActivity"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/achievements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search achievement by criteria */
        get: operations["findAchievement"];
        put?: never;
        /** Create a new student achievement */
        post: operations["createAchievement"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/achievements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an existing achievement */
        put: operations["updateAchievement"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/achievement-approvals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search achievement approval by criteria */
        get: operations["findAchievementApproval"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/achievement-approvals/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an existing achievement approval */
        get: operations["getAchievementApprovalById"];
        /** Update an existing achievement approval */
        put: operations["updateAchievementApproval"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/achievement-approvals/{id}/profanity-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Perform profanity check on a pending record */
        post: operations["checkAchievementApprovalProfanity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            code: string;
            parameter?: string[];
            message: string;
        };
        /** @enum {string} */
        Language: "English" | "TraditionalChinese" | "SimplifiedChinese";
        /** @enum {string} */
        OrderByDirection: "Ascending" | "Descending";
        /** @enum {string} */
        AuthenticationStatus: "Success" | "ChangePasswordOnly";
        /** @enum {string} */
        UserRole: "Student" | "Parent" | "Teacher" | "Admin" | "Alumni";
        /** @enum {string} */
        UserStatus: "Active" | "Inactive" | "Suspend";
        /** @enum {string} */
        ActivityStatus: "Closed" | "Open" | "Scheduled" | "Cancelled";
        /** @enum {string} */
        AchievementSubmissionRole: "Teacher" | "Student" | "Both";
        /** @enum {string} */
        AchievementStatus: "Approved" | "Published";
        /** @enum {string} */
        AchievementApprovalStatus: "Pending" | "Rejected";
        AuditControl: {
            /** @description Id of the create user */
            createdBy: string;
            /**
             * Format: datetime
             * @description Create datetime
             */
            createdAt: string;
            /** @description Id of the last update user */
            updatedBy: string;
            /**
             * Format: datetime
             * @description Create datetime
             */
            updatedAt: string;
            version: number;
        };
        Pagination: {
            offset: number;
            limit?: number;
            total: number;
        };
        Class: {
            /** @description grade + class number */
            id: string;
            grade: number;
            classNumber: string;
        };
        Student: {
            /** @description Student Id in format of className + "-" + studentNumber */
            id: string;
            /** @description level + gradeNumber + classNumber of class */
            classId: string;
            studentNumber: number;
            lastName: {
                [key: string]: unknown;
            };
            firstName: {
                [key: string]: unknown;
            };
        };
        UserRegistrationRequest: {
            /** @description Email address of user.  Unique among all users */
            email: string;
            /** @description Id of the student */
            classId: string;
            studentNumber: number;
        };
        UserCreation: {
            /** @description Email address of user.  Unique among all users */
            email: string;
            name: {
                [key: string]: unknown;
            };
            role: components["schemas"]["UserRole"];
            status: components["schemas"]["UserStatus"];
            /** @description Id of students */
            entitledStudentId: string[];
            /** @description Has approval right or not.  Applicable to Teacher only */
            withApprovalRight: boolean;
        };
        UserRegistration: {
            /** @description Access token returned from Google */
            accessToken: string;
            studentId: string;
            /** @description Name of the student */
            studentName: string;
        };
        UserUpdate: components["schemas"]["UserCreation"] & {
            password?: string;
            version: number;
        };
        User: components["schemas"]["AuditControl"] & WithRequired<components["schemas"]["UserCreation"], "status"> & {
            id: string;
            status: components["schemas"]["UserStatus"];
            /** Format: datetime */
            lastLoginDatetime?: string;
            /** Format: datetime */
            passwordExpiryDatetime?: string;
        };
        AuthenticationResponse: {
            status: components["schemas"]["AuthenticationStatus"];
            user: components["schemas"]["User"];
        };
        ActivityCategory: {
            code: string;
            name: {
                [key: string]: unknown;
            };
        };
        ActivityPayload: {
            categoryCode: string;
            name: {
                [key: string]: unknown;
            };
            description: string;
            /**
             * Format: datetime
             * @description Start date of the activity.  The time part must be zero
             */
            startDate: string;
            /**
             * Format: datetime
             * @description Start date of the activity.  The time part must be zero
             */
            endDate: string;
            achievementSubmissionRole: components["schemas"]["AchievementSubmissionRole"];
            participantGrade: number[];
            sharable: boolean;
            ratable: boolean;
            /** Format: int32 */
            eCoin: number;
            status: components["schemas"]["ActivityStatus"];
        };
        Activity: {
            id: string;
        } & components["schemas"]["ActivityPayload"] & components["schemas"]["AuditControl"];
        /** @enum {string} */
        FindActivityOrderByField: "Name" | "StartDate" | "EndDate";
        FindActivityResult: {
            data: components["schemas"]["Activity"][];
        } & components["schemas"]["Pagination"];
        AchievementAttachmentCreation: {
            fileName: string;
            /** @description Optional bucket name, should provide a value if the file is a newly uploaded one */
            bucketName?: string;
            objectKey: string;
        };
        AchievementAttachment: components["schemas"]["AchievementAttachmentCreation"] & {
            getUrl: string;
        };
        AchievementCreation: {
            studentId: string;
            activityId: string;
            /** Format: int32 */
            rating?: number;
            comment: string;
        };
        Achievement: {
            id: string;
            submissionRole: components["schemas"]["AchievementSubmissionRole"];
            status: components["schemas"]["AchievementStatus"];
        } & components["schemas"]["AchievementCreation"];
        AchievementApproval: {
            id: string;
            submissionRole: components["schemas"]["AchievementSubmissionRole"];
            status: components["schemas"]["AchievementApprovalStatus"];
        } & components["schemas"]["AchievementCreation"];
        AchievementApprovalReview: {
            id: string;
            comment: string;
        } & components["schemas"]["AuditControl"];
        AchievementApprovalDetail: {
            review: components["schemas"]["AchievementApprovalReview"][];
            attachment: components["schemas"]["AchievementAttachment"][];
        } & components["schemas"]["AchievementApproval"];
        FindAchievementResult: {
            data: components["schemas"]["Achievement"][];
        } & components["schemas"]["Pagination"];
        FindAchievementApprovalResult: {
            data: components["schemas"]["AchievementApproval"][];
        } & components["schemas"]["Pagination"];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    findClass: {
        parameters: {
            query?: {
                grade?: number;
                classNumber?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Class"][];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findStudent: {
        parameters: {
            query?: {
                /** @description Id of the student */
                id?: string[];
                /**
                 * @description Id of the class
                 * @example 1A
                 */
                classId?: string;
                /** @description Find student with lastName + firstName contains input name as substring, for any language */
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Student"][];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findUser: {
        parameters: {
            query?: {
                id?: string[];
                email?: string;
                name?: string;
                studentId?: string;
                status?: components["schemas"]["UserStatus"][];
                role?: components["schemas"]["UserRole"][];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreation"] | components["schemas"]["UserRegistration"];
            };
        };
        responses: {
            /** @description OK */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    authenticateUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: email */
                    email: string;
                    /**
                     * Format: password
                     * @example mySecret123
                     */
                    password: string;
                };
            };
        };
        responses: {
            /** @description JWT token returned on successful login */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticationResponse"];
                };
            };
            /** @description Unauthorized - Invalid userId or password */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    authenticateGoogleUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Id token returned from Google */
                    accessToken: string;
                };
            };
        };
        responses: {
            /** @description JWT token returned on successful login */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticationResponse"];
                };
            };
            /** @description Unauthorized - Invalid user */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listActivityCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivityCategory"][];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findActivity: {
        parameters: {
            query?: {
                categoryCode?: string[];
                name?: string;
                startDateFrom?: string;
                startDateTo?: string;
                endDateFrom?: string;
                endDateTo?: string;
                participantGrade?: number[];
                role?: components["schemas"]["AchievementSubmissionRole"][];
                status?: components["schemas"]["ActivityStatus"][];
                offset?: number;
                limit?: number;
                orderByField?: components["schemas"]["FindActivityOrderByField"];
                orderByDirection?: components["schemas"]["OrderByDirection"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FindActivityResult"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createActivity: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivityPayload"];
            };
        };
        responses: {
            /** @description OK */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getActivityById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description activity id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"];
                };
            };
            /** @description not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateActivity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Activity ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivityPayload"] & {
                    version: number;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findAchievement: {
        parameters: {
            query?: {
                studentId?: string;
                activityId?: string;
                role?: components["schemas"]["AchievementSubmissionRole"];
                createDateFrom?: string;
                offset?: number;
                limit?: number;
                orderByDirection?: components["schemas"]["OrderByDirection"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FindAchievementResult"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createAchievement: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AchievementCreation"] & {
                    attachment: components["schemas"]["AchievementAttachmentCreation"][];
                };
            };
        };
        responses: {
            /** @description OK */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Achievement"] | components["schemas"]["AchievementApproval"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateAchievement: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Achievement Id */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AchievementCreation"] & {
                    version: number;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Achievement"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findAchievementApproval: {
        parameters: {
            query?: {
                studentId?: string;
                activityId?: string;
                role?: components["schemas"]["AchievementSubmissionRole"];
                createDateFrom?: string;
                offset?: number;
                limit?: number;
                orderByDirection?: components["schemas"]["OrderByDirection"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FindAchievementApprovalResult"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getAchievementApprovalById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Achievement Id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementApprovalDetail"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateAchievementApproval: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Achievement Id */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AchievementCreation"] & {
                    version: number;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementApproval"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    checkAchievementApprovalProfanity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Achievement Id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
